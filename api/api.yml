openapi: 3.0.3
info:
  title: Friends Net API
  description: |
    Frineds Net server API.
  version: 1.0.0

# Using Bearer HTTP authentication, can be switched to OAuth2, OpenId, ...
security:
   - JsonWebToken: []
# Tags are used to group endpoints. There can be multiple tags per endpoint,
# the first tag determines the interface (in case of Java) defining this endpoint
# in the generated code.
tags:
  - name: AuthenticationController
    description: Controller for authentication, signing in and out and signing up.
  - name: UserSearchController
    description: Controller for searching of users.
  - name: PostController
    description: Controller for operations with posts and announcements
  - name: AdminController
    description: Controller for admin only operations

# Paths are the URIs within your REST Application.
paths:
  '/login':
    post:
      summary: Signs user in
      description: Allows user to sign in and authenticate to get access for all other operations.
      security: []
      tags:
        - AuthenticationController
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          description: User credentials are incorrect

  '/register':
    post:
      summary: Registers new user
      description: Allows user to sign up and get access to all other operations after signing in.
      security: []
      tags:
        - AuthenticationController
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      operationId: register
      responses:
        '200':
          description: User successfully registered.
        '400':
          description: User login is not in a valid format or is already taken

  '/api/users':
    get:
      summary: Searches for users
      description: Finds users who's name contains given substring.
      tags:
        - UserSearchController
      operationId: findUsers
      parameters:
       - $ref: '#/components/parameters/UserSearchParameter'
      responses:
       '200':
         $ref: '#/components/responses/UserSearchResponse'
       '401':
         description: Unauthenticated

  '/api/friendship/request':
    post:
      summary: Sends friend request
      description: Sends friend request to user with given username. They may accept, decline or block the request sender.
      tags:
        - UserRelationshipController
      operationId: createFriendRequest
      parameters:
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. Friend request successfully sent.
        '400':
          description: User with given username does not exist.
        '401':
          description: Unauthenticated
    get:
      summary: Finds all friend requests
      description: Finds all pending friend requests for currently authenticated user.
      tags:
        - UserSearchController
      operationId: findFriendRequests
      responses:
        '200':
          $ref: '#/components/responses/UserSearchResponse'
        '401':
          description: Unauthenticated

  '/api/friendship':
    delete:
      summary: Deletes relationship with user
      description: Deltes relationship with user in query. Can be used for removing friend request or removing existing friend.
      tags:
        - UserRelationshipController
      operationId: deleteRelationship
      parameters:
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. Relationship successfully deleted.
        '400':
          description: Target user not found.
        '401':
          description: Unauthenticated
    put:
      summary: Accepts friendship request
      description: Accepts friendship request from user in query.
      tags:
        - UserRelationshipController
      operationId: acceptFriendRequest
      parameters:
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. Friend request successfully accepted.
        '400':
          description: Target friend request not found.
        '401':
          description: Unauthenticated

  '/api/friendship/block':
    put:
      summary: Blocks target user
      description: Blocks user with pending friend request for authenticated user or if he is in friend relationship with authenticated user.
      tags:
        - UserRelationshipController
      operationId: blockUser
      parameters:
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. User succesfully blocked.
        '400':
          description: User with valid relationship status not found.
        '401':
          description: Unauthenticated
    delete:
      summary: Unblocks target user
      description: Unblocks user who has been previously blocked by authenticated user. Relationship will be deleted and friend request may be sent again.
      tags:
        - UserRelationshipController
      operationId: unblockUser
      parameters:
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. User successfully unblocked.
        '400':
          description: Relationship in invalid state or blocked user with given username not found.
        '401':
          description: Unauthenticated or unauthorized

  '/api/users/friends':
    get:
      summary: Finds user's friends.
      description: Finds all users that are friends with authenticated user.
      tags:
        - UserSearchController
      operationId: findFriends
      responses:
        '200':
          $ref: '#/components/responses/UserSearchResponse'
        '401':
          description: Unauthenticated

  '/api/users/blocked':
    get:
      summary: Finds blocked users
      description: Finds all users that authenticated user blocked.
      tags:
        - UserSearchController
      operationId: findBlockedUsers
      responses:
        '200':
          $ref: '#/components/responses/UserSearchResponse'
        '401':
          description: Unauthenticated

  '/api/users/friends-roles':
    get:
      summary: Finds user's friends with roles.
      description: Finds all users that are friends with authenticated user including their roles.
      tags:
        - UserSearchController
      operationId: findFriendsWithRoles
      responses:
        '200':
          $ref: '#/components/responses/UserWithRolesSearchResponse'
        '401':
          description: Unauthenticated

  '/api/post':
    post:
      summary: Creates new post
      tags:
        - PostController
      operationId: createNewPost
      requestBody:
        $ref: '#/components/requestBodies/CreatePostRequest'
      responses:
        '200':
          description: OK. New post successfully created
        '400':
          description: Post data are invalid.
        '401':
          description: Unauthorized
    get:
      summary: Finds frined's and users posts
      description: Finds newest posts from user's frineds and user himself. Posts are ordered by creation date. \
        Number of returned posts may be limited by a reqest parameter. Allows searching from certain date.
      tags:
        - PostController
      operationId: findNewestPosts
      parameters:
        - $ref: '#/components/parameters/MaximumPostsParam'
        - $ref: '#/components/parameters/PostsNewerThanParam'
      responses:
        '200':
          $ref: '#/components/responses/FoundPostsResponse'
        '400':
          description: Invalid parameters. Maximum post count has to be > 5 and maximum date has to be now.
        '401':
          description: Unauthenticated

  '/api/admin/role':
    put:
      summary: Adds role to user
      tags:
        - AdminController
      operationId: addRoleToUser
      parameters:
        - $ref: '#/components/parameters/UserRoleParam'
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. Role successfully added.
        '400':
          description: User not found.
        '401':
          description: Unauthorized or Unauthenticated.
    delete:
      summary: Removes role from user
      tags:
        - AdminController
      operationId: removeRoleFromUser
      parameters:
        - $ref: '#/components/parameters/UserRoleParam'
        - $ref: '#/components/parameters/UsernameQueryParameter'
      responses:
        '200':
          description: OK. Role successfully removed.
        '400':
          description: User not found.
        '401':
          description: Unauthorized or Unauthenticated.

components:

  securitySchemes:
    JsonWebToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestVO'

    '401':
      description: Access token is missing or invalid

    LoginResponse:
      description: Response on successfull login request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserAuthenticationVO'

    UserSearchResponse:
      description: Response on successfull user search query.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FoundUsersVO'

    UserWithRolesSearchResponse:
      description: Response on successfull user with roles search query.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FoundUsersWithRolesVO'

    FoundPostsResponse:
      description: Response on successfull post query.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FoundPostsVO'

  requestBodies:
    LoginRequest:
      required: true
      description: Request to sign in with login and password.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCredentialsVO'

    RegisterRequest:
      required: true
      description: Request to sign up to create new user account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistrationDataVO'

    CreatePostRequest:
      required: true
      description: Request to create new post.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewPostDataVO'

  parameters:
    UserSearchParameter:
      name: nameLike
      in: query
      required: true
      description: Substring sought in user's names.
      allowEmptyValue: false
      schema:
        type: string
        minLength: 3
      example: Adam

    UsernameQueryParameter:
      name: username
      in: query
      required: true
      description: Username of the user we want to send friend request to.
      allowEmptyValue: false
      schema:
        type: string
        minLength: 4
      example: boss23@mail.com

    MaximumPostsParam:
      name: maxPosts
      in: query
      description: Maximum number of posts returned
      required: false
      schema:
        type: int
        format: int32
        minimum: 5
      example: 10

    PostsNewerThanParam:
      name: newerThan
      in: query
      description: Date and time which should be posts newer than
      required: false
      schema:
        type: string
        format: date-time

    UserRoleParam:
      name: role
      in: query
      description: Role we want to add to or remove from user
      required: true
      schema:
        $ref: '#/components/schemas/EnumUserRole'

  schemas:
    UserCredentialsVO:
      description: Object with user authentication request data.
      type: object
      properties:
        login:
          type: string
          format: email
          description: User's email. Will be used as login.
          maxLength: 50
          minLength: 4
          example: great@email.com
        password:
          type: string
          format: password
          description: User's password
          example: my-secret_Password
      required:
        - login
        - password
      example:
        login: great@email.com
        password: my-secret_Password

    UserRelationshipVO:
      description: Object with data about found user and it's relationship status with searching user.
      allOf:
        - $ref: '#/components/schemas/UserIdentificationDataVO'
        - type: object
          properties:
            relationshipStatus:
              $ref: '#/components/schemas/EnumRelationshipStatus'
      required:
        - name
        - login
      example:
        name: John Doe
        login: john.doe@gmail.com
        relationshipStatus: BLOCKED

    EnumRelationshipStatus:
      description: Relationship status of two users.
      type: string
      enum:
        - REQUEST_SENT
        - FRIENDS
        - BLOCKED

    UserRegistrationDataVO:
      description: Object with all required user data for registration.
      allOf:
        - $ref: '#/components/schemas/UserCredentialsVO'
        - type: object
          properties:
            name:
              type: string
              description: User's name that will be displayed.
              maxLength: 50
              example: John Doe
          required:
            - name
      required:
        - name
        - login
        - password

    UserIdentificationDataVO:
      description: Object with user's identification data.
      properties:
        name:
          type: string
          description: User's name that will be displayed.
          maxLength: 50
          example: John Doe
        login:
          type: string
          format: email
          description: User's email. Will be used as login.
          maxLength: 50
          minLength: 4
          example: great@email.com
      example:
        name: John Doe
        login: great@email.com
      required:
        - name
        - login

    UserIdentificationDataWithRolesVO:
      description: Object with user's identification data and roles.
      allOf:
        - $ref: '#/components/schemas/UserIdentificationDataVO'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/EnumUserRole'
      required:
        - name
        - login
        - roles

    UserAuthenticationVO:
      description: Object carrying logged in user's detail information and generated JSON Web Token for authentication.
      type: object
      properties:
        login:
          type: string
          format: email
          description: User's login.
          maxLength: 50
          minLength: 4
          example: example@email.com
        name:
          type: string
          description: User's displayed name.
          example: John Doe
        token:
          type: string
          description: Generated JSON Web Token.
          example: 0$[wfwnfuowburmgjo2126+
        roles:
          type: array
          items:
            $ref: '#/components/schemas/EnumUserRole'
      required:
        - login
        - name
        - token
        - roles
      example:
        login: example@email.com
        name: John Doe
        token: 0$[wfwnfuowburmgjo2126+
        roles: ['USER', 'ADMIN']

    EnumUserRole:
      description: Enumeration of user roles
      type: string
      enum:
        - 'USER'
        - 'ADMIN'

    FoundUsersVO:
      description: Object carrying a list of found users.
      type: array
      items:
        $ref: '#/components/schemas/UserRelationshipVO'
      
    FoundUsersWithRolesVO:
      description: Object carrying a list of found users including their roles.
      type: array
      items:
        $ref: '#/components/schemas/UserIdentificationDataWithRolesVO'

    FoundPostsVO:
      description: Object carrying a list of found posts.
      type: array
      items:
        $ref: '#/components/schemas/PostVO'

    NewPostDataVO:
      description: Data of new post to create
      type: object
      properties:
        content:
          type: string
          description: Content of the post.
          example: Report of sudden car crash on D1 highway in the direction to Brno from Prague. Two people are injured.
        dateCreated:
          type: string
          format: date-time
          description: Date and time of the post creation.
          example: '2022-01-07:15:00:00'
        isAnnouncement:
          type: boolean
          description: Flag whether the post is an announcement or not. Only admins may create announcements.
      required:
        - content
        - dateCreated
        - isAnnouncement

    PostVO:
      description: Data of an existing post including it's author.
      allOf:
        - $ref: '#/components/schemas/NewPostDataVO'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/UserIdentificationDataVO'

    BadRequestVO:
      description: Object describing a Bad Request (400) HTTP error.
      type: object
      properties:
        cause:
          type: string
          description: Reason why was request not successfully fulfiled.
          example: User with given username not found.
      required:
        - cause
      example:
        cause: User with given username not found.

  #   # It is a good practice to prefix your API with some common prefix to
#   # allow for better serviceability - security rules, loadbalancer configuration...
#   # We are using /api/v1 here, /admin part is here to differentiate the 
#   # administrative API from the potential public or other endpoints.
#   # This is usually the URI of a list (GET) and a create (POST) operations.
#   '/api/v1/admin/users':
#     # The HTTP method being used.
#     get:
#       # Short human readable description, use the 'description' property to
#       # add a longer one.
#       summary: List users
#       # This is the computer readable identification of this endpoint.
#       # It usually translates directly to a method name in the generated code.
#       operationId: listUsers
#       # See tags above for explanation. Combination of this tag and the operationId
#       # defined above means this operation will be represented by the UserApi.listUser
#       # method in the generated code.
#       tags:
#         - user
#       # Example of query parameters (passed as GET/POST parameters). These are here
#       # to allow for paging of the listed results. Another common use is to 
#       # add filtering possibility (in the case of list operations).
#       # This is the first occurence of $ref. Take a look at the referenced 
#       # object. You can replace this reference with the contents of the object.
#       # It's up to you whether to use inline or referenced definition.
#       parameters:
#         - $ref: '#/components/parameters/OffsetQueryParam'
#         - $ref: '#/components/parameters/LimitQueryParam'
#       # This part should cover all possible server responses and their respective
#       # data structures.
#       responses:
#         '200':
#           $ref: '#/components/responses/ListUsersResponse'
#         '400':
#           $ref: '#/components/responses/400'
#         '401':
#           $ref: '#/components/responses/401'
#         '403':
#           $ref: '#/components/responses/403'

#   # This URI usually serves reads (GET), updates (PUT) and deletes (DELETE).
#   # Note the part in curly braces which marks the presence of a path parameter.
#   # In the real URI it is replaced by the parameter's value in the form
#   # defined by the referenced type. Take a look at it.
#   '/api/v1/admin/users/{userId}':
#     parameters:
#       - $ref: '#/components/parameters/UserIdPathParam'
#     get:
#       summary: Get user detail
#       operationId: getUser
#       tags:
#         - user
#       responses:
#         '200':
#           $ref: '#/components/responses/GetUserResponse'
#         '400':
#           $ref: '#/components/responses/400'
#         '401':
#           $ref: '#/components/responses/401'
#         '403':
#           $ref: '#/components/responses/403'
#         '404':
#           $ref: '#/components/responses/404'
#     put:
#       summary: Update user detail
#       operationId: updateUser
#       tags:
#         - user
#       requestBody:
#         $ref: '#/components/requestBodies/UpdateUserRequest'
#       responses:
#         '204':
#           description: User was successfully updated.
#         '400':
#           $ref: '#/components/responses/400'
#         '401':
#           $ref: '#/components/responses/401'
#         '403':
#           $ref: '#/components/responses/403'
#         '404':
#           $ref: '#/components/responses/404'

# # Components referenced from the endpoints. There are several groups
# # of components, we are using parameters, requestBodies, responses, schemas and
# # securitySchemes here, but there are also others (headers, links, ...) 
# components:

#   # The actual definitions of query and path parameters referenced above.
#   # Note that we are describing their features here, but the actual
#   # data type is being referenced further. This time we do it to reuse
#   # the data types in other places. It is also good practice to have
#   # them all defined in the schemas part of the components definition. 
#   parameters:
#     OffsetQueryParam:
#       in: query
#       name: offset
#       required: false
#       schema:
#         $ref: '#/components/schemas/PageNumber'
#     LimitQueryParam:
#       in: query
#       name: limit
#       required: false
#       schema:
#         $ref: '#/components/schemas/PageSize'
#     UserIdPathParam:
#       in: path
#       name: userId
#       required: true
#       schema:
#         $ref: '#/components/schemas/UUID'

#   # Request bodies for requests that can contain a body (usually POST and PUT).
#   requestBodies:
#     UpdateUserRequest:
#       description: Request body to update a user.
#       content:
#         # Multiple mime types can be defined here with different
#         # referenced schemas, but we are using only application/json
#         application/json:
#           schema:
#             $ref: '#/components/schemas/UpdatableUserInfo'

#   # Response definitions
#   responses:
#     # First we define the common responses shared among multiple endpoints.
#     '400':
#       description: Problem with input data
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/ApiError'

#     '401':
#       description: User is not authenticated.

#     '403':
#       description: User is not authorized to perform requested action.

#     '404':
#       description: Object not found.
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/ApiError'

#     # And then the individial responses (usually linked with the 200 OK status code)
#     GetUserResponse:
#       description: Response to the getUser operation.
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/UserDetail'

#     ListUsersResponse:
#       description: Response to the listUsers operation.
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/UsersList'


#   # Finally, the actual objects being referenced in all the parts above, are
#   # defined in this section. 
#   schemas:
  
#     # This is a simple object showing that you can combine the in-line
#     # definition of properties with references.
#     ApiError:
#       type: object
#       properties:
#         code:
#           $ref: '#/components/schemas/ErrorCode'
#         message:
#           type: string
#           maxLength: 1024
#       example:
#         code: APP123
#         message: Cannot find user 'hlinik'!

#     # Example of a pattern defined string.
#     ErrorCode:
#       type: string
#       pattern: '^[A-Z]{3}\d{3}$'
#       example: APP123

#     # Another pattern defined string, this time a login name.
#     Login:
#       type: string
#       pattern: '^[a-zA-Z][a-zA-Z0-9]*([\._][a-zA-Z0-9]+)*$'
#       minLength: 3
#       example:
#         - karel.havlicek
#         - lucy_liu
  
#     # Paging properties.
#     PageNumber:
#       description: Number of the current page.
#       type: integer
#       format: int64
#       minimum: 0
#       example: 42

#     PageSize:
#       description: Number of items on one page.
#       type: integer
#       format: int32
#       minimum: 10
#       maximum: 100
#       example: 25

#     Paging:
#       description: Paging object covering all necessary fields (page number, page size, total count of objects).
#       type: object
#       properties:
#         pageNumber:
#           $ref: '#/components/schemas/PageNumber'
#         pageSize:
#           $ref: '#/components/schemas/PageSize'
#         totalCount:
#           $ref: '#/components/schemas/TotalCount'
#       required:
#         - pageNumber
#         - pageSize
#         - totalCount
#       example:
#         pageNumber: 42
#         pageSize: 25
#         totalCount: 1984

#     TotalCount:
#       description: Total count of elements.
#       type: integer
#       format: int64
#       minimum: 0
#       example: 1984

#     # Request data used to update an existing user.
#     UpdatableUserInfo:
#       type: object
#       properties:
#         firstName:
#           type: string
#           example: Karel
#         lastName:
#           type: string
#           example: Havlíček
#         email:
#           type: string
#           format: email
#           example: karel.havlicek@gmail.com
#         password:
#           type: string
#           format: password
#           minLength: 5
#       example:
#         firstName: Karel
#         lastName: Havlíček
#         email: karel.havlicek@gmail.com
#         password: L33tHax0r

#     # Detailed user information, note the inheritance represented
#     # by the allOf property. This adds new properties to the
#     # UserSummary object.
#     UserDetail:
#       type: object
#       allOf:
#         - $ref: '#/components/schemas/UserSummary'
#       properties:
#         roles:
#           type: array
#           items:
#             $ref: '#/components/schemas/UserRole'
#         description:
#           type: string
#           maxLength: 1024
#           example: He's the boss.
#       example:
#         id: af1e78a2-43b4-11eb-9176-54e1ad105857
#         firstName: Karel
#         lastName: Havlíček
#         email: karel.havlicek@gmail.com
#         description: He's the boss.
#         roles: [ADMIN, USER]

#     # In this case we include the paging information in the response
#     # adding the list of users as another property.
#     UsersList:
#       type: object
#       allOf:
#         - $ref: '#/components/schemas/Paging'
#       properties:
#         users:
#           type: array
#           items:
#             $ref: '#/components/schemas/UserSummary'

#     UserRole:
#       type: string
#       pattern: '^[A-Z]+$'
#       minLength: 3
#       maxLength: 64
#       example: ADMIN

#     UserSummary:
#       type: object
#       properties:
#         id:
#           $ref: '#/components/schemas/UUID'
#         login:
#           $ref: '#/components/schemas/Login'
#         firstName:
#           type: string
#           example: Karel
#         lastName:
#           type: string
#           example: Havlíček
#         email:
#           type: string
#           format: email
#           example: karel.havlicek@gmail.com
#       required:
#         - id
#         - email
#       example:
#         id: af1e78a2-43b4-11eb-9176-54e1ad105857
#         firstName: Karel
#         lastName: Havlíček
#         email: karel.havlicek@gmail.com

#     UUID:
#       description: Using UUIDs for object IDs instead of plain integers.
#       type: string
#       format: uuid
#       example: af1e78a2-43b4-11eb-9176-54e1ad105857

#   # Security schemes, you can read more about them in the OpenAPI documentation.
#   # We are using basic HTTP authentication.
#   securitySchemes:
#     BasicAuth:
#       type: http
#       scheme: basic
